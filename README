1. Introduction
   This coding exercise implements:
     1) a basic multi-threading consumer-producer model.  
     2) a Deadlock Scenario with Consumer and producer Model
     3) a Livelock Scenario with Consumer and Producer Model
2. classes
   2.1 BufferItem
       A BufferItem provides a string data field, an unique ID, 
       Type of string is picked bacause it is mark the source of data content.
   2.2 BufferQueue
       BuffferQueue derives from std::queue with multi-thread-safe functions to acquire/return BufferItem objects. 
       A mutex and condition variable are used to syncrhonize access to the queue.
       A referene bool variable over_ is defined to exit conditional variable wait. In the current code base, this has not been utilized yet.
   2.3 Roles 
       2.3.1 Worker
          This is base class provides base/common features for Consumer and Produce and should not be instantiated.
          A Worker has a name, a role (e.g. Consumer or Producer), two BufferQueue references for data-filled Buffer Queue  and unfilled Buffer Queue respectively.
          The reference bool varialbe halt_ is defined to exit the while loop executing in a thread, yet to be utilized.
          The latency_ field designate number of seconds a Worker requires to fully consume/produce BufferItem; Worker::work() does this timing control job.
      2.3.2 Consumer
          Consumer implemens a while loop to acquire/consume BufferItem objects.
          Consumer consumes data by print out it to the console.
     2.3.3 Producer
          Producer implements a while loop to acquire/produce BufferItem objects.
          In producing data in BufferItem objects, it writes its name and a number which increments in iteration of the while loop
     2.3.4 SuperWorker
          SuperWorker inherits from both Consumer and Producer; SuperWorker::work() invokes Consumer::work and Producer::work(). 
   2.4 Thread Models
     2.4.1 ThreadModelBase
         ThreadModeBase provides base code for provisioning Consumer/Producer objects and running each in a thread.
         It does not provide BufferQueues, which are left to various concrete Thread Models.
     2.4.2 ThreadModeOne
         Should have named it as ThreadModelSimple. :-)
         It provides two BufferQueue objects and demontrates opereraions of configurable number of Consumers and Producers.
     2.4.3 ThreadModelDeadlock
         ThreadModelDeadlock inherits ThreadModelBase and overrides run().
         The trick is in its constructor, it makes each SuperWorker to consume buffers produced by next SuperWorker and formes circular dependencies; consequently,
         which incurs a deadlock scenarion in execution.
     2.4.4 ThreadModelLivelock
         ThreadModelDeadLock inherits ThreadModelBase and overrides run().
         The trick:
            1) each SuperWorker will make attemp to acquire a BufferItem for its Producer duty if it failes to acquire a BufferItem for its Consumer duty. 
               In another word, it must acquire both BufferItems in order to produce.
            2) Deadlock won't occur because Mutexes for both duties will be releasd in each iteration.
         To support ThreadModelDeadLivelock:
            1) BufferQueue::acquireBufferWithoutCV() is added
            2) Consumer::acquireBuffer() and Consumer::consume() are added
            3) Producer::acquireBuffer() and Producer::produce() are added
            4) SuperWorker::workWithoutCV() is added
      
3. Source code structure
   |--- Makefile, README
   |---inc (.h header files)
   |
   |---src (cpp files for classes, main, utils, etc)
4. Build the code
   run make command which generates binary executable cp
5. Run the binary executable 
    Users must specify ThreadModel followed by other required arguments accordingly 
    Available ThreadModel names: ThreadModelOne, ThreadModelDeadlock.
     5.1 Case of ThreadModelOne
         Commandline arguments are "ThreadModelOne",  (number of Consumers), (number of Producers), (number of BufferItems Per BufferQueue) 
         for example: we have 2 Consumers, 3 Producers, 5 BufferItems Per BufferQueue:
          $./cp ThreadModelOne 2 3 5"
     5.2 Case of ThreadModelDeadlock   
         Commandline arguments are "ThreadModelDeadlock", (number of SuperWorkers), (number of BufferItems Per BufferQueue)
         for example: we have two SuperWorkers, 5 BufferItems Per BufferQueue:
          $./cp ThreadModelDeadlock 2 5 
6. Output logs of a sample run 
	$ ./cp ThreadModelOne 2 3 5  
	[Consumer_1]:     Attemps to acquire filled  buffer from [Paired_BufferQueue_0_filled]
	[Producer_2]:     Atttemps to acquire unfilled buffer from [Paired_Buffer_Queue_0_unfilled]
	[Consumer_0]:     Attemps to acquire filled  buffer from [Paired_BufferQueue_0_filled]
	[Producer_2]:     Atttemps to acquire unfilled buffer from [Paired_Buffer_Queue_0_unfilled]
	[Producer_2]:  PRODUCING   $$$$$$[Producer_2_data_0]$$$$$$ in [BufferItem 4]
	[Producer_1]:     Atttemps to acquire unfilled buffer from [Paired_Buffer_Queue_0_unfilled]
	[Producer_1]:     Atttemps to acquire unfilled buffer from [Paired_Buffer_Queue_0_unfilled]
	[Producer_1]:  PRODUCING   $$$$$$[Producer_1_data_0]$$$$$$ in [BufferItem 3]
	[Producer_0]:     Atttemps to acquire unfilled buffer from [Paired_Buffer_Queue_0_unfilled]
	[Producer_0]:     Atttemps to acquire unfilled buffer from [Paired_Buffer_Queue_0_unfilled]
	[Producer_0]:  PRODUCING   $$$$$$[Producer_0_data_0]$$$$$$ in [BufferItem 2]
	[Producer_2]:     Atttemps to acquire unfilled buffer from [Paired_Buffer_Queue_0_unfilled]
	[Producer_2]:  PRODUCING   $$$$$$[Producer_2_data_0]$$$$$$ in [BufferItem 4]
	[Producer_2]:  POSTED       $$$$$$[BufferItem 4 to [Paired_BufferQueue_0_filled]
	[Producer_0]:     Atttemps to acquire unfilled buffer from [Paired_Buffer_Queue_0_unfilled]
	[Producer_0]:  PRODUCING   $$$$$$[Producer_0_data_0]$$$$$$ in [BufferItem 2]
	[Producer_0]:  POSTED       $$$$$$[BufferItem 2 to [Paired_BufferQueue_0_filled]
	[Consumer_1]:     Attemps to acquire filled  buffer from [Paired_BufferQueue_0_filled]
	[Consumer_1]:  CONSUMING ******(Producer_2_data_0)****** in [BufferItem 4]
	[Producer_1]:     Atttemps to acquire unfilled buffer from [Paired_Buffer_Queue_0_unfilled]
	[Producer_1]:  PRODUCING   $$$$$$[Producer_1_data_0]$$$$$$ in [BufferItem 3]
	[Producer_1]:  POSTED       $$$$$$[BufferItem 3 to [Paired_BufferQueue_0_filled]
	[Consumer_0]:     Attemps to acquire filled  buffer from [Paired_BufferQueue_0_filled]
	[Consumer_0]:  CONSUMING ******(Producer_0_data_0)****** in [BufferItem 2]
	[Consumer_0]:     Attemps to acquire filled  buffer from [Paired_BufferQueue_0_filled]
	[Consumer_0]:  CONSUMING ******(Producer_0_data_0)****** in [BufferItem 2]
	[Consumer_0]:  RELEASED   ******[BufferItem 2] to [Paired_Buffer_Queue_0_unfilled]
	[Consumer_1]:     Attemps to acquire filled  buffer from [Paired_BufferQueue_0_filled]
	[Consumer_1]:  CONSUMING ******(Producer_2_data_0)****** in [BufferItem 4]
	[Consumer_1]:  RELEASED   ******[BufferItem 4] to [Paired_Buffer_Queue_0_unfilled]
	[Producer_2]:     Atttemps to acquire unfilled buffer from [Paired_Buffer_Queue_0_unfilled]
	[Producer_2]:     Atttemps to acquire unfilled buffer from [Paired_Buffer_Queue_0_unfilled]
	[Producer_2]:  PRODUCING   $$$$$$[Producer_2_data_1]$$$$$$ in [BufferItem 1]
	[Producer_0]:     Atttemps to acquire unfilled buffer from [Paired_Buffer_Queue_0_unfilled]
	[Producer_1]:     Atttemps to acquire unfilled buffer from [Paired_Buffer_Queue_0_unfilled]
	[Producer_0]:     Atttemps to acquire unfilled buffer from [Paired_Buffer_Queue_0_unfilled]
	[Producer_0]:  PRODUCING   $$$$$$[Producer_0_data_1]$$$$$$ in [BufferItem 0]
	[Producer_1]:     Atttemps to acquire unfilled buffer from [Paired_Buffer_Queue_0_unfilled]
	[Producer_1]:  PRODUCING   $$$$$$[Producer_1_data_1]$$$$$$ in [BufferItem 2]
	[Consumer_0]:     Attemps to acquire filled  buffer from [Paired_BufferQueue_0_filled]
	[Consumer_1]:     Attemps to acquire filled  buffer from [Paired_BufferQueue_0_filled]
	[Consumer_0]:     Attemps to acquire filled  buffer from [Paired_BufferQueue_0_filled]
	[Consumer_0]:  CONSUMING ******(Producer_1_data_0)****** in [BufferItem 3]
	[Producer_2]:     Atttemps to acquire unfilled buffer from [Paired_Buffer_Queue_0_unfilled]
	[Producer_2]:  PRODUCING   $$$$$$[Producer_2_data_1]$$$$$$ in [BufferItem 1]
	[Producer_2]:  POSTED       $$$$$$[BufferItem 1 to [Paired_BufferQueue_0_filled]
	[Consumer_1]:     Attemps to acquire filled  buffer from [Paired_BufferQueue_0_filled]
	[Consumer_1]:  CONSUMING ******(Producer_2_data_1)****** in [BufferItem 1]
	[Producer_0]:     Atttemps to acquire unfilled buffer from [Paired_Buffer_Queue_0_unfilled]
	[Producer_0]:  PRODUCING   $$$$$$[Producer_0_data_1]$$$$$$ in [BufferItem 0]
	[Producer_0]:  POSTED       $$$$$$[BufferItem 0 to [Paired_BufferQueue_0_filled]
	[Producer_1]:     Atttemps to acquire unfilled buffer from [Paired_Buffer_Queue_0_unfilled]
	[Producer_1]:  PRODUCING   $$$$$$[Producer_1_data_1]$$$$$$ in [BufferItem 2]
	[Producer_1]:  POSTED       $$$$$$[BufferItem 2 to [Paired_BufferQueue_0_filled]
           

